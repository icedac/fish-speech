#!/usr/bin/env python3
"""Test two-speaker dialogue synthesis."""

import requests
import json
import time
import subprocess
import sys
import os

API_URL = "http://localhost:8080"
API_KEY = "test-api-key-12345"

headers = {
    "X-VR-APIKEY": API_KEY,
    "Content-Type": "application/json"
}

# Sample dialogue script
WEATHER_DIALOGUE = [
    ("speaker1", "ÏïàÎÖïÌïòÏÑ∏Ïöî, ÏãúÏ≤≠Ïûê Ïó¨Îü¨Î∂Ñ. Ïò§ÎäòÏùò ÎÇ†Ïî®Î•º Ï†ÑÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§."),
    ("speaker2", "ÎÑ§, ÏïàÎÖïÌïòÏÑ∏Ïöî. Ïò§ÎäòÏùÄ Ï†ÑÍµ≠Ï†ÅÏúºÎ°ú ÎßëÏùÄ ÎÇ†Ïî®Í∞Ä Ïù¥Ïñ¥ÏßÄÍ≤†ÏäµÎãàÎã§."),
    ("speaker1", "Í∑∏Î†áÍµ∞Ïöî. ÎØ∏ÏÑ∏Î®ºÏßÄ ÏÉÅÌô©ÏùÄ Ïñ¥Îñ§Í∞ÄÏöî?"),
    ("speaker2", "Îã§ÌñâÌûà ÎØ∏ÏÑ∏Î®ºÏßÄ ÎÜçÎèÑÎäî 'Ï¢ãÏùå' ÏàòÏ§ÄÏùÑ Ïú†ÏßÄÌïòÍ≥† ÏûàÏñ¥Ïöî. ÏïºÏô∏ ÌôúÎèôÌïòÍ∏∞ Ï¢ãÏùÄ ÎÇ†Ïî®ÏûÖÎãàÎã§."),
    ("speaker1", "Ï¢ãÏùÄ ÏÜåÏãùÏù¥ÎÑ§Ïöî. Ïù¥Î≤à Ï£ºÎßê ÎÇ†Ïî®Îäî Ïñ¥Îñ®ÍπåÏöî?"),
    ("speaker2", "Ï£ºÎßêÏóêÎèÑ ÌôîÏ∞ΩÌïú ÎÇ†Ïî®Í∞Ä Í≥ÑÏÜçÎê† ÏòàÏ†ïÏûÖÎãàÎã§. ÎÇòÎì§Ïù¥ Í≥ÑÌöçÏù¥ ÏûàÏúºÏã† Î∂ÑÎì§ÍªòÎäî Ìù¨ÏÜåÏãùÏù¥ÎÑ§Ïöî."),
    ("speaker1", "Í∞êÏÇ¨Ìï©ÎãàÎã§. Ï¢ãÏùÄ ÌïòÎ£® Î≥¥ÎÇ¥ÏÑ∏Ïöî!"),
    ("speaker2", "ÎÑ§, Ïó¨Îü¨Î∂ÑÎèÑ Ï¶êÍ±∞Ïö¥ ÌïòÎ£® ÎêòÏÑ∏Ïöî!")
]

CASUAL_DIALOGUE = [
    ("speaker1", "Ïò§ÎûúÎßåÏù¥Ïïº! Ïñ¥ÎñªÍ≤å ÏßÄÎÉàÏñ¥?"),
    ("speaker2", "Ïûò ÏßÄÎÉàÏßÄ! ÎÑàÎäî Ïñ¥Îïå?"),
    ("speaker1", "ÎÇòÎèÑ Ïûò ÏßÄÎÉàÏñ¥. ÏöîÏ¶ò Î≠êÌïòÍ≥† ÏßÄÎÇ¥?"),
    ("speaker2", "ÏÉàÎ°úÏö¥ ÌîÑÎ°úÏ†ùÌä∏ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥. Ïù∏Í≥µÏßÄÎä• Í¥ÄÎ†®Îêú Í±∞Ïïº."),
    ("speaker1", "Ïò§, Ìù•ÎØ∏Î°≠ÎÑ§! Ïñ¥Îñ§ ÌîÑÎ°úÏ†ùÌä∏Ïù∏Îç∞?"),
    ("speaker2", "ÏùåÏÑ± Ìï©ÏÑ± Í∏∞Ïà†ÏùÑ ÌôúÏö©Ìïú ÏÑúÎπÑÏä§Î•º ÎßåÎì§Í≥† ÏûàÏñ¥."),
    ("speaker1", "ÎåÄÎã®ÌïòÎã§! ÎÇòÏ§ëÏóê ÏûêÏÑ∏Ìûà Îì§Î†§Ï§ò."),
    ("speaker2", "Í∑∏Îûò, Íº≠ ÏñòÍ∏∞Ìï¥Ï§ÑÍ≤å!")
]


def get_speakers():
    """Get list of registered speakers."""
    response = requests.get(f"{API_URL}/v1/speakers", headers=headers)
    if response.status_code == 200:
        return response.json()["speakers"]
    else:
        print(f"‚ùå Failed to get speakers: {response.text}")
        return []


def create_dialogue_script(dialogue, speaker_mapping):
    """Create dialogue script with speaker IDs."""
    script = []
    for speaker_key, text in dialogue:
        if speaker_key in speaker_mapping:
            script.append({
                "speaker_id": speaker_mapping[speaker_key],
                "text": text
            })
        else:
            print(f"‚ö†Ô∏è  Warning: Speaker '{speaker_key}' not found in mapping")
    return script


def synthesize_dialogue(script, output_filename="dialogue_output"):
    """Request dialogue synthesis."""
    synthesis_request = {
        "script": script,
        "output_format": "wav",
        "sample_rate": 44100,
        "caption_format": "vtt"
    }
    
    print("üéôÔ∏è  Requesting dialogue synthesis...")
    response = requests.post(
        f"{API_URL}/v1/synthesize",
        headers=headers,
        json=synthesis_request
    )
    
    if response.status_code == 202:
        job_id = response.json()["job_id"]
        print(f"‚úÖ Synthesis job created: {job_id}")
        
        # Poll for completion
        start_time = time.time()
        while True:
            time.sleep(2)
            response = requests.get(f"{API_URL}/v1/jobs/{job_id}", headers=headers)
            job_status = response.json()
            
            elapsed = time.time() - start_time
            print(f"‚è≥ Status: {job_status['status']} ({elapsed:.1f}s)")
            
            if job_status["status"] == "succeeded":
                return process_results(job_status, output_filename)
                
            elif job_status["status"] == "failed":
                print(f"‚ùå Synthesis failed: {job_status.get('error', 'Unknown error')}")
                return False
                
            elif elapsed > 300:  # 5 minute timeout
                print("‚ùå Synthesis timeout (5 minutes)")
                return False
    else:
        print(f"‚ùå Request failed: {response.text}")
        return False


def process_results(job_status, output_filename):
    """Download and save synthesis results."""
    audio_url = job_status["audio_url"]
    
    print(f"\n‚úÖ Synthesis completed!")
    print(f"üìç Audio URL: {audio_url}")
    
    # Download audio file
    audio_response = requests.get(audio_url)
    audio_file = f"{output_filename}.wav"
    with open(audio_file, "wb") as f:
        f.write(audio_response.content)
    print(f"üíæ Audio saved as: {audio_file}")
    
    # Save captions if available
    if "captions" in job_status:
        caption_file = f"{output_filename}.vtt"
        with open(caption_file, "w", encoding="utf-8") as f:
            f.write(job_status["captions"])
        print(f"üìù Captions saved as: {caption_file}")
    
    # Display dialogue timing
    if "caption_data" in job_status:
        print("\nüé¨ Dialogue Timing:")
        for caption in job_status["caption_data"]:
            print(f"   {caption['start']:6.2f}s - {caption['end']:6.2f}s : {caption['text']}")
    
    return audio_file


def play_audio(audio_file):
    """Play the generated audio file."""
    print(f"\nüîä Playing audio: {audio_file}")
    
    try:
        if sys.platform == "darwin":  # macOS
            subprocess.run(["afplay", audio_file])
        elif sys.platform == "linux":  # Linux
            if subprocess.run(["which", "aplay"], capture_output=True).returncode == 0:
                subprocess.run(["aplay", audio_file])
            elif subprocess.run(["which", "paplay"], capture_output=True).returncode == 0:
                subprocess.run(["paplay", audio_file])
            else:
                print("‚ÑπÔ∏è  No audio player found. Please play the file manually.")
        elif sys.platform == "win32":  # Windows
            os.startfile(audio_file)
        else:
            print("‚ÑπÔ∏è  Please play the audio file manually.")
    except Exception as e:
        print(f"‚ÑπÔ∏è  Could not play audio automatically: {e}")
        print("   Please play the file manually.")


def main():
    print("üé≠ VoiceReel Two-Speaker Dialogue Test")
    print("=" * 50)
    
    # Check if API is accessible
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code != 200:
            print("‚ùå VoiceReel API is not accessible at", API_URL)
            return
    except:
        print("‚ùå Cannot connect to VoiceReel API at", API_URL)
        return
    
    # Get speakers
    speakers = get_speakers()
    if len(speakers) < 2:
        print(f"‚ùå Need at least 2 speakers, found {len(speakers)}")
        print("   Please run test_register_speakers.py first")
        return
    
    print("\nüì¢ Available speakers:")
    for i, speaker in enumerate(speakers):
        print(f"   {i+1}. {speaker['name']} ({speaker['id']}) - {speaker['lang']}")
    
    # Create speaker mapping
    speaker_mapping = {
        "speaker1": speakers[0]["id"],
        "speaker2": speakers[1]["id"]
    }
    
    print(f"\nüé¨ Using speakers:")
    print(f"   Speaker 1: {speakers[0]['name']}")
    print(f"   Speaker 2: {speakers[1]['name']}")
    
    # Choose dialogue
    print("\nüìñ Select dialogue:")
    print("   1. Weather forecast (formal)")
    print("   2. Casual conversation (informal)")
    
    choice = input("\nEnter choice (1 or 2, default=1): ").strip()
    
    if choice == "2":
        dialogue = CASUAL_DIALOGUE
        output_name = "casual_dialogue"
        print("\nüó£Ô∏è  Selected: Casual conversation")
    else:
        dialogue = WEATHER_DIALOGUE
        output_name = "weather_dialogue"
        print("\nüó£Ô∏è  Selected: Weather forecast")
    
    # Create script
    script = create_dialogue_script(dialogue, speaker_mapping)
    
    print(f"\nüìú Dialogue script ({len(script)} lines):")
    for i, line in enumerate(script):
        speaker_name = next(s['name'] for s in speakers if s['id'] == line['speaker_id'])
        print(f"   {i+1}. [{speaker_name}] {line['text']}")
    
    # Synthesize
    print("\n" + "=" * 50)
    audio_file = synthesize_dialogue(script, output_name)
    
    if audio_file:
        # Play audio
        play_choice = input("\n‚ñ∂Ô∏è  Play audio now? (y/n, default=y): ").strip().lower()
        if play_choice != 'n':
            play_audio(audio_file)
        
        print("\n‚ú® Test completed successfully!")
        print(f"   Audio file: {audio_file}")
        print(f"   Caption file: {output_name}.vtt")
    else:
        print("\n‚ùå Test failed")


if __name__ == "__main__":
    main()